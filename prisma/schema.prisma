// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  company       String?
  phone         String?
  address       String?
  role          String    @default("USER") // USER, ADMIN, SUPERADMIN
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  clients      Client[]
  invoices     Invoice[]
  transactions Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id      String  @id @default(cuid())
  name    String
  email   String?
  phone   String?
  address String?
  taxId   String?
  userId  String

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id          String   @id @default(cuid())
  number      String   @unique
  clientId    String
  userId      String
  issueDate   DateTime @default(now())
  dueDate     DateTime
  status      String   @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE
  subtotal    Float    @default(0)
  taxAmount   Float    @default(0)
  totalAmount Float    @default(0)
  notes       String?

  client User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientInfo Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  items  InvoiceItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  description String
  quantity    Float   @default(1)
  price       Float
  total       Float

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  type        String   // INCOME, EXPENSE
  category    String
  amount      Float
  description String?
  date        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 