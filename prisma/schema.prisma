// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Şirketler - Ana organizasyonlar (rol yok)
model Company {
  id            String   @id @default(cuid())
  name          String
  taxId         String?   @unique
  address       String?
  phone         String?
  email         String?
  website       String?
  logo          String?   // Şirket logosu URL'i
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // İlişkiler
  users         User[]         // Şirkete bağlı kullanıcılar
  clients       Client[]       // Şirketin müşterileri
  invoices      Invoice[]      // Şirketin faturaları
  transactions  Transaction[]   // Şirketin işlemleri
  cashAccounts  CashAccount[]   // Şirketin kasaları
}

// Kullanıcılar - Kişiler (şirketlere bağlı, rolleri var)
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  password       String
  emailVerified  DateTime?
  image          String?
  phone          String?
  address        String?
  role           String    @default("USER") // USER, ADMIN, SUPERADMIN
  companyId      String?   // Şirkete bağlı (SUPERADMIN için null olabilir)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // İlişkiler
  accounts       Account[]
  sessions       Session[]
  company        Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  clients        Client[]  // Kullanıcının müşterileri
  invoices       Invoice[] // Kullanıcının faturaları
  transactions   Transaction[] // Kullanıcının işlemleri
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Müşteriler - Şirketlere bağlı
model Client {
  id        String  @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  taxId     String?
  companyId String  // Şirkete bağlı
  userId    String  // Hangi kullanıcı tarafından oluşturuldu
  isDeleted Boolean @default(false) // Soft delete için

  // İlişkiler
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices  Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Faturalar - Hem kullanıcıya hem şirkete bağlı
model Invoice {
  id          String   @id @default(cuid())
  number      String   @unique
  clientId    String
  userId      String   // Hangi kullanıcı oluşturdu
  companyId   String   // Hangi şirkete ait
  issueDate   DateTime @default(now())
  dueDate     DateTime
  status      String   @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE
  subtotal    Float    @default(0)
  taxAmount   Float    @default(0)
  totalAmount Float    @default(0)
  notes       String?
  isDeleted   Boolean  @default(false) // Soft delete için

  // İlişkiler
  client      Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  items       InvoiceItem[]
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  description String
  quantity    Float   @default(1)
  price       Float
  total       Float

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Kasa Türleri - Şirketlere bağlı
model CashAccount {
  id              String   @id @default(cuid())
  companyId       String   // Hangi şirkete ait
  name            String   // Kasa adı (örn: "Nakit Kasa", "Kredi Kartı Kasası")
  type            String   // CASH, CREDIT_CARD, BANK_ACCOUNT
  initialBalance  Float    @default(0) // Başlangıç bakiyesi
  balance         Float    @default(0) // Mevcut bakiye
  isActive        Boolean  @default(true)
  description     String?
  
  // İlişkiler
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  transactions Transaction[] // Bu kasaya ait işlemler

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// İşlemler - Hem kullanıcıya hem şirkete bağlı
model Transaction {
  id          String   @id @default(cuid())
  userId      String   // Hangi kullanıcı oluşturdu
  companyId   String   // Hangi şirkete ait
  cashAccountId String? // Hangi kasaya ait (null ise kasa işlemi değil)
  type        String   // INCOME, EXPENSE
  category    String
  amount      Float
  description String?
  date        DateTime @default(now())
  invoiceId   String?  // Fatura ile ilişkili mi?
  isPaid      Boolean  @default(false) // Ödendi mi? (giderler için)
  isDeleted   Boolean  @default(false) // Soft delete için
  
  // İlişkiler
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  cashAccount CashAccount? @relation(fields: [cashAccountId], references: [id], onDelete: SetNull)
  invoice     Invoice?     @relation(fields: [invoiceId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 